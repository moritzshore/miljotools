[{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MET Nordic Reanalysis Dataset","text":"Tip: check server status issues downloading exist: https://status.met./ MET Nordic Reanalysis Data set reanalysis product Meteorologisk institutt. can read data set . MET Nordic rerun archive operational dataset can accessed using dedicated functions miljotools. Please inform benefits limitations reanalysis data applying data set needs. Figure 1: spatial domain reanalysis dataset. (SOURCE: MET Nordic) Specs 1x1 km grid covering Nordics (see Figure 1.) Hourly resolution 2012-09-01 TODAY Variables: temperature, precipitation, relative humidity, wind speed, wind direction, air pressure, cloud area fraction, short+long-wave radiation (-welling), land area fraction, altitude. Input access data specific region Nordics, need provide following input: path georeferenced shapefile desired area directory like save data ( starting date time ending date time Optionally, can pass additional parameters buffer shapefile, choose variables, choose resolution, preview data downloading.","code":""},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"MET Nordic Reanalysis Dataset","text":"following figure shows flowchart different functions fit together, along explanation parameters. Figure 2: Overview metnordic functions. can download full version image following show use functions, first required libraries need loaded example workflow:","code":"require(miljotools) require(dplyr) require(sf) require(stars) require(mapview) require(readr) require(raster) require(terra) require(tidyterra)"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"coordinate-window","dir":"Articles","previous_headings":"","what":"Coordinate Window","title":"MET Nordic Reanalysis Dataset","text":"start, one needs determine grid cells dataset need downloaded. can done metnordic_coordwindow(). function requires requires us pass geo-referenced shapefile area interest. geometry shapefile can either polygon point , can either path file (including sidecar files) sf object R environment. example: (way, files publicly available, can try code ) Now, geometries loaded, can create coordinate windows . also buffer polygon shapefile ensure full coverage. gives us list containing minimum maximum x y cells download data . metadist NA polygon geometries. metadist entry needed point geometry indicates distance nearest data set grid cell. course, geometry two coordinates:","code":"# downloading example files: download.file(url = \"https://gitlab.nibio.no/moritzshore/example-files/-/raw/main/MetNoReanalysisV3/cs10point.zip\", destfile = \"cs10point.zip\") download.file(url = \"https://gitlab.nibio.no/moritzshore/example-files/-/raw/main/MetNoReanalysisV3/cs10_basin.zip\", destfile = \"cs10_basin.zip\") unzip(\"cs10point.zip\") unzip(\"cs10_basin.zip\") cs10_basin = \"cs10_basin/cs10_basin.shp\" cs10_point = \"cs10point/cs10point.shp\" example_polygon_geometry <- read_sf(cs10_basin) example_point_geometry <-  read_sf(cs10_point) map1 <- mapview(example_polygon_geometry, alpha.regions = .3, legend = F) map2 <- mapview(example_point_geometry, col.regions = \"orange\", legend = F)  map1+map2 coord_window_poly <- metnordic_coordwindow(example_polygon_geometry, area_buffer = 1500) coord_window_point <- metnordic_coordwindow(example_point_geometry) paste0(names(coord_window_poly), collapse = \", \") paste0(coord_window_poly, collapse = \", \") ## [1] \"index_xmin, index_xmax, index_ymin, index_ymax, metadist\" ## [1] \"663, 674, 732, 750, NA\" paste0(names(coord_window_point), collapse = \", \") paste0(coord_window_point, collapse = \", \") ## [1] \"index_x, index_y, metadist\" ## [1] \"669, 744, 702\""},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"build-query","dir":"Articles","previous_headings":"","what":"Build Query","title":"MET Nordic Reanalysis Dataset","text":"grid-cells set, can build queries like download server. also need decide following: mn_variables meteorological variables downloaded, defined . fromdate todate time stamps period like download. Make sure follow formatting requirements. grid_resolution resolution area downloaded. large regions dense network grid cells needed, parameter can used. setting 3 example, download data every 3rd cell grid, x y directions. dataset determines data source. Classic setting “reanalysis”, re-run archive, covers approximately 2012-2022. “operational” data set also reanalysis product, covers time period approximately 2018-TODAY. Probably useful setting “continuous” uses re-run archive ever possible, switches operational data set re-run ends. can read . Determining settings: point geometry: now files want download: OPenDaP download urls: (just one example, long). “metpparchivev3” indicates comes re-run archive. say “metpparchive” , indicate comes operational archive!","code":"my_variables =c(   \"air_temperature_2m\",   \"relative_humidity_2m\",   \"wind_speed_10m\",   \"integral_of_surface_downwelling_shortwave_flux_in_air_wrt_time\",   \"precipitation_amount\" ) start = \"2019-06-01 00:00:00\" end = \"2019-06-03 00:00:00\" queries_poly <- metnordic_buildquery(bounding_coords = coord_window_poly,                                 mn_variables = my_variables,                                 fromdate = start, todate = end,                                  grid_resolution = 1, dataset = \"continuous\") queries_point <- metnordic_buildquery(bounding_coords = coord_window_point,                                 mn_variables = my_variables,                                 fromdate = start, todate = end,                                  grid_resolution = 1, dataset = \"continuous\") queries_point$filenames %>% head() ## [1] \"met_analysis_1_0km_nordic_20190601T00Z.nc\" ## [2] \"met_analysis_1_0km_nordic_20190601T01Z.nc\" ## [3] \"met_analysis_1_0km_nordic_20190601T02Z.nc\" ## [4] \"met_analysis_1_0km_nordic_20190601T03Z.nc\" ## [5] \"met_analysis_1_0km_nordic_20190601T04Z.nc\" ## [6] \"met_analysis_1_0km_nordic_20190601T05Z.nc\" queries_poly$full_urls[1] ## [1] \"https://thredds.met.no/thredds/dodsC/metpparchivev3/2019/06/01/met_analysis_1_0km_nordic_20190601T00Z.nc?x[662:1:673],y[731:1:749],latitude[731:1:749][662:1:673],longitude[731:1:749][662:1:673],altitude[731:1:749][662:1:673],air_temperature_2m[0:1:0][731:1:749][662:1:673],relative_humidity_2m[0:1:0][731:1:749][662:1:673],wind_speed_10m[0:1:0][731:1:749][662:1:673],integral_of_surface_downwelling_shortwave_flux_in_air_wrt_time[0:1:0][731:1:749][662:1:673],precipitation_amount[0:1:0][731:1:749][662:1:673]\""},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"download","dir":"Articles","previous_headings":"","what":"Download","title":"MET Nordic Reanalysis Dataset","text":"Now ready download files. Lets download 14:00 rained time, bit:  Please note, downloaded files separated per variable. ? project code designed needed files like . Also, files get big quickly, per-variable separation can sometimes useful.","code":"poly_path <- \"indiv_poly/\" dir.create(poly_path, showWarnings = F) fps <- metnordic_download(url = queries_poly$full_urls[15],                           outdir = poly_path,                           vars = my_variables, verbose = F) (fps[[1]] %>% terra::rast(\"air_temperature_2m\"))[[1]] %>% plot(main = \"air_temperature_2m\")"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"download-a-date-range","dir":"Articles","previous_headings":"Download","what":"Download a Date Range","title":"MET Nordic Reanalysis Dataset","text":"Now course, like download just one file, whole date range, following function allows .","code":"dl_path = metnordic_download_daterange(   queries = queries_poly,   directory = poly_path,   mn_variables = my_variables) list.files(dl_path) %>% head() ## [1] \"met_analysis_1_0km_nordic_20190601T00Z_air_temperature_2m.nc\"                                             ## [2] \"met_analysis_1_0km_nordic_20190601T00Z_integral_of_surface_downwelling_shortwave_flux_in_air_wrt_time.nc\" ## [3] \"met_analysis_1_0km_nordic_20190601T00Z_precipitation_amount.nc\"                                           ## [4] \"met_analysis_1_0km_nordic_20190601T00Z_relative_humidity_2m.nc\"                                           ## [5] \"met_analysis_1_0km_nordic_20190601T00Z_wind_speed_10m.nc\"                                                 ## [6] \"met_analysis_1_0km_nordic_20190601T01Z_air_temperature_2m.nc\""},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"downloading-from-point-geometry","dir":"Articles","previous_headings":"Download","what":"Downloading from Point Geometry","title":"MET Nordic Reanalysis Dataset","text":"Please note! metnordic_download() metnordic_download_daterange() work point geometries. ’re meant extract downloaded .nc files using point locations. , really don’t want , can use metnordic_point() function:","code":"point_path <- \"indiv_point/\" dir.create(point_path, showWarnings = F) point_dl_path <- metnordic_point(   area = example_point_geometry,   path = point_path,   fromdate = start,   todate = end,   mn_variables = my_variables,   verbose = F) ## Warning in metnordic_point(area = example_point_geometry, path = point_path, : Warning, this function will be retired in the next update, please transition to the new system. ##               ##  https://moritzshore.github.io/miljotools/articles/metno_reanal.html # Viewing the data: data <- read_csv(\"indiv_point/METNORDIC_point.csv\", show_col_types = F) plot(data$date, data$air_temperature_2m-273.15, type = \"b\",       ylab = \"air_temperature_2m\", xlab = \"Timestamp\",       main = \"metnordic_point() \\ndownload\")"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"merging-hourly-files","dir":"Articles","previous_headings":"","what":"Merging Hourly Files","title":"MET Nordic Reanalysis Dataset","text":"working hourly data, next logical step merge per-hour per-variable files simply per-variable files. can like : Hourly Air Temperature K","code":"outpath = \"merged_poly/\" dir.create(outpath, showWarnings = F) custom_merge <- function(variable) {   metnordic_merge_hourly(folderpath = poly_path,                          variable = variable,                          outpath = outpath,                          verbose = T, overwrite = T) } res = lapply(X = my_variables, FUN = custom_merge) ## miljo🌿tools metnordic_merge_hourly >> Merging 49 files:  air_temperature_2m (using 18 threads) ## Warning in metnordic_merge_hourly(folderpath = poly_path, variable = variable, : file already exists, overwriting: metno-air_temperature_2m_20190601T00Z-20190603T00Z.nc ## miljo🌿tools metnordic_merge_hourly >> Merging 49 files:  relative_humidity_2m (using 18 threads) ## Warning in metnordic_merge_hourly(folderpath = poly_path, variable = variable, : file already exists, overwriting: metno-relative_humidity_2m_20190601T00Z-20190603T00Z.nc ## miljo🌿tools metnordic_merge_hourly >> Merging 49 files:  wind_speed_10m (using 18 threads) ## Warning in metnordic_merge_hourly(folderpath = poly_path, variable = variable, : file already exists, overwriting: metno-wind_speed_10m_20190601T00Z-20190603T00Z.nc ## miljo🌿tools metnordic_merge_hourly >> Merging 49 files:  integral_of_surface_downwelling_shortwave_flux_in_air_wrt_time (using 18 threads) ## Warning in metnordic_merge_hourly(folderpath = poly_path, variable = variable, : file already exists, overwriting: metno-integral_of_surface_downwelling_shortwave_flux_in_air_wrt_time_20190601T00Z-20190603T00Z.nc ## miljo🌿tools metnordic_merge_hourly >> Merging 49 files:  precipitation_amount (using 18 threads) ## Warning in metnordic_merge_hourly(folderpath = poly_path, variable = variable, : file already exists, overwriting: metno-precipitation_amount_20190601T00Z-20190603T00Z.nc data <- brick(res[[1]]) spatast <- data  %>% rast() hours = dim(data)[3] for (i in c(1:hours)) {   plot(spatast[[i]], legend = FALSE, main = spatast[[i]] %>% names()) }"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"extracting-timeseries","dir":"Articles","previous_headings":"","what":"Extracting Timeseries","title":"MET Nordic Reanalysis Dataset","text":"cases, one want time series point map, metnordic_extract() exactly .  like extract multiple points, points within area, can use metnordic_extract_grid() . function creates data file metadata file point.","code":"dir.create(\"extracted\", showWarnings = F) metnordic_extract(   directory = \"./merged_poly\",   mn_variables = my_variables,   point = example_point_geometry,   outdir = \"./extracted\",   name = \"vignette_example\",   verbose = T) ## [1] \"./extracted/METNORDIC_point_vignette_example.csv\" # Viewing the data: data <- read_csv(\"extracted//METNORDIC_point_vignette_example.csv\", show_col_types = F) plot(data$date, data$air_temperature_2m - 273.15,   type = \"b\", ylab = \"air_temperature_2m\",   xlab = \"Timestamp\", main = \"metnordic_extract() data\") extracted_path = metnordic_extract_grid(   merged_path =  \"merged_poly/\",   area = example_polygon_geometry,   mn_variables = my_variables,   outdir = \"./extracted_grid\",   verbose = F ) extracted_path %>% list.files(pattern = \"extract_grid_\", full.names = T) %>%   first() %>% read_csv(show_col_types = F) %>% head() ## # A tibble: 6 × 6 ##   date                air_temperature_2m relative_humidity_2m wind_speed_10m ##   <dttm>                           <dbl>                <dbl>          <dbl> ## 1 2019-05-31 23:00:00               282.                0.884           1.30 ## 2 2019-06-01 00:00:00               282.                0.919           1.42 ## 3 2019-06-01 01:00:00               282.                0.926           1.33 ## 4 2019-06-01 02:00:00               282.                0.948           2.07 ## 5 2019-06-01 03:00:00               282.                0.963           1.72 ## 6 2019-06-01 04:00:00               282.                0.981           3.17 ## # ℹ 2 more variables: ## #   integral_of_surface_downwelling_shortwave_flux_in_air_wrt_time <dbl>, ## #   precipitation_amount <dbl>"},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"aggregating","dir":"Articles","previous_headings":"Further processing the data cube","what":"Aggregating","title":"MET Nordic Reanalysis Dataset","text":"cases might want extract single points like keep working NetCDF4 data cube. like data daily form, can aggregate (summarize) using metnordic_aggregate():  Now single day, usually like aggregate many days . , can use function metnordic_aggregate_daterange(), performs operation parallel multiple cores. day date range contain 24 individual files (24hrs) created returning list labelled FALSE.","code":"dir.create(\"aggregated/\", showWarnings = F) agg_path <- metnordic_aggregate(directory = \"indiv_poly/\",                                  variable = \"air_temperature_2m\",                                 method = \"mean\",                                 day =  \"20190601\",                                 outpath = \"aggregated/\",                                 verbose = F, overwrite = T) data <- brick(agg_path) spatast <- data  %>% rast() plot(spatast, main = \"air_temperature_2m\") agg_dr = metnordic_aggregate_daterange(   directory =  \"indiv_poly/\",   variable = \"air_temperature_2m\",   method = \"max\",   start = start,   end = end,   outpath = \"aggregated_range/\")"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"merging","dir":"Articles","previous_headings":"Further processing the data cube","what":"Merging","title":"MET Nordic Reanalysis Dataset","text":"Now usually merge aggregated days together, miljotools, like : Tip: don’t forget add method aggregation suffix!","code":"# aggregating a second day to merge it agg_path <- metnordic_aggregate(directory = \"indiv_poly/\",                                  variable = \"air_temperature_2m\",                                 method = \"mean\",                                 day =  \"20190602\",                                 outpath = \"aggregated/\",                                 verbose = F, overwrite = T) dir.create(\"merged_daily/\") ## Warning in dir.create(\"merged_daily/\"): 'merged_daily' already exists merged_fp <- metnordic_merge_daily(folderpath = \"aggregated/\",                                    variable = \"air_temperature_2m_mean\",                                    outpath = \"merged_daily/\",overwrite = T) ## Warning in metnordic_merge_daily(folderpath = \"aggregated/\", variable = ## \"air_temperature_2m_mean\", : file already exists, overwriting: ## MetNordic_air_temperature_2m_mean_20190601to20190602.nc"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"re-projecting","dir":"Articles","previous_headings":"Further processing the data cube","what":"Re-projecting","title":"MET Nordic Reanalysis Dataset","text":"use-case requires NetCDF file specific projection, can re-project like :","code":"metnordic_reproject(filepath = merged_fp,                     outfile = \"reprojected_example.nc\",                     projstring = \"+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs +type=crs\") ## [1] \"reprojected_example.nc\" reproj <- rast(\"reprojected_example.nc\") mapview(reproj)"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"link-to-other-models","dir":"Articles","previous_headings":"","what":"Link to Other Models","title":"MET Nordic Reanalysis Dataset","text":"far, conversion MET Nordic data, downloaded miljotools, implemented three models, order implementation: SWAT+, CWatM, SWAP. works:","code":""},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"swat","dir":"Articles","previous_headings":"Link to Other Models","what":"SWAT+","title":"MET Nordic Reanalysis Dataset","text":"can apply MET Nordic data SWAT+ setup function swatplus_metnordic() . done aid SWATprepR. need use files written metnordic_extract_grid().","code":"# downloading an example SWAT+ project download.file(url = \"https://gitlab.nibio.no/moritzshore/example-files/-/raw/main/MetNoReanalysisV3/cs10_txt.zip\", destfile = \"cs10_txt.zip\") unzip(\"cs10_txt.zip\")  swatplus_metnordic(directory = extracted_path, swat_setup = \"cs10_txt/\")"},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"cwatm","dir":"Articles","previous_headings":"Link to Other Models","what":"CWatM","title":"MET Nordic Reanalysis Dataset","text":"CWatM takes NetCDF files, take file projected metnordic_reproject() correct projection setup. Note, needs done per variable.","code":"cwatm_convert_nc(infile = \"reprojected_example.nc\", outfile = \"cwatm_ready.nc\") ## [1] \"cwatm_ready.nc\""},{"path":"https://moritzshore.github.io/miljotools/articles/metno_reanal.html","id":"swap","dir":"Articles","previous_headings":"Link to Other Models","what":"SWAP","title":"MET Nordic Reanalysis Dataset","text":"SWAP, field scale model, needs point data. can use output metnordic_extract() function swap_metnordic() create meteo file SWAP model.","code":"swap_metnordic(   dldir = \"extracted/\",   name = \"vignette_example\",   outpath = \"metnordic.met\",   timescale = \"daily\")"},{"path":"https://moritzshore.github.io/miljotools/articles/Norwegian_Soil_Classification.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Soil Classification","text":"Classifies soils based clay, silt, sand fractions using USDA (Ditzler, Scheffe, & Monger, 2017) Norwegian (Sveistrup & Njøs, 1984) systems. Figure 1: Soil classificatio based Norwegian (left) USDA (right) systems. function following features: Automatically Compatible csv xlsx. Tries automatically guess format data, acts accordingly. Automatically rounds total fraction 100%, differences 1%. Exports classification based user settings Creates interactive diagnostic plot, well saving one output directory. Note: script automatically try identify columns contain clay, silt, sand fractions also try identify format . work, might get incorrect flawed results, make sure READ CONSOLE prints , make sure correct things. script read file automatically, following format recommended: Clay column: “clay” percent format (%), decimal = “.” Silt column: “silt” format (%), decimal = “.” Sand column: “sand” percent format (%), decimal = “.”","code":""},{"path":"https://moritzshore.github.io/miljotools/articles/Norwegian_Soil_Classification.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Soil Classification","text":"simple usage shown . -depth run arguments please visit function help page.","code":"# for demonstration purposes, use path of package example_file_path <- system.file(package = \"miljotools\", \"/extdata/soil_classify/example.csv\")  classify_soil(   input = example_file_path,   output = \"output_file.csv\",   version = \"NOR\",   plot_result = T,   interactive = TRUE,   decimal = \".\",   write = FALSE # false just for demonstration.  ) #> Identifying column:  sand  #> sand  column identified as ' sand ' index= 3  #> > mean value of  sand  column is  25   #> Assuming values are in PERCENT form. ie. 43.1% (instead of 0.431) #> Identifying column:  silt  #> silt  column identified as ' silt ' index= 4  #> > mean value of  silt  column is  23.1   #> Assuming values are in PERCENT form. ie. 43.1% (instead of 0.431) #> Identifying column:  clay  #> clay  column identified as ' clay ' index= 2  #> > mean value of  clay  column is  51.9   #> Assuming values are in PERCENT form. ie. 43.1% (instead of 0.431) #>  #>  #>  Checking for fraction sums over 100 %: #> >  0  entries have a fractional sum of over 100. #> >  0  entries have a fractional sum of under 100. #>  adjusting the sand fraction and rounding... #>  #> > classifiying NORWEGIAN textures #> [1] \"C:/Users/mosh/Documents/GIT/miljotools/vignettes/output_file.csv\""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/articles/thermopluviograms.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Thermopluviograms","text":"tutorial show create Thermopluviograms Extreme rainfall plots using climate data Norwegian climate service observed data SeNorge. get started, grab data SeNorge.","code":""},{"path":"https://moritzshore.github.io/miljotools/articles/thermopluviograms.html","id":"senorge","dir":"Articles","previous_headings":"Introduction","what":"SeNorge","title":"Thermopluviograms","text":"Go senorge., side menu, select themes > daily maps > temperature  Select point interest map, select “Graph point” download data point  Perform Precipitation:  concludes data acquisition part SeNorge. course, can source observed data ever please use stead SeNorge, match format.","code":""},{"path":"https://moritzshore.github.io/miljotools/articles/thermopluviograms.html","id":"nve","dir":"Articles","previous_headings":"Introduction","what":"NVE","title":"Thermopluviograms","text":"climate data sourced NVE’s Klima service cente Go https://nedlasting.nve./klimadata/kss (DEPRECATED) Nevermind, discontinued, instead go : https://thredds.met./thredds/catalog/KSS/Klima_i_Norge_2100/utgave2015/catalog.html seems like getting data become lot harder now, perhaps needs re-anylsis v3 type solutions.. now tutorial continue example data, manage download location (now).","code":""},{"path":"https://moritzshore.github.io/miljotools/articles/thermopluviograms.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Thermopluviograms","text":"example, download example data GitLab Repo: Now can generate Thermopluviograms","code":"download.file(url = \"https://gitlab.nibio.no/moritzshore/example-files/-/raw/main/thermopluviograms/Climate_Data.zip\",                destfile = \"Climate_Data.zip\") unzip(\"Climate_Data.zip\",        exdir = \".\") thermopluviogram(   modelled_climate = \"Climate_Data/Modelled/\",   observed_pr = \"Climate_Data/Observed/senorge_pr.csv\",   observed_tm = \"Climate_Data/Observed/senorge_temp.csv\",   outpath = \"../man/figures\",   location = \"Aas\",   chosen_model_runs = c(\"CNRM-CCLM\", \"CNRM-RCA\", \"ECEARTH-RCA\", \"IPSL-RCA\"),   ref_startdate = \"1971-01-01\",   ref_enddate = \"2005-12-31\",   obs_startdate = \"2041-01-01\",   obs_enddate = \"2070-12-31\",   left_yaxis_only = T,   fixed_axis = T,   verbose = T ) #> miljo🌿tools thermopluviogram >> generating thermopluviograms...  #> ...for period 2041-01-01 to 2070-12-31  #> ...with a reference period from 2005-12-31 to 1971-01-01  #> ...for location named Aas  #> ...using modelled data from Climate_Data/Modelled/  #> ...and observed precipitation data from Climate_Data/Observed/senorge_pr.csv  #> ...and observed temperature data from Climate_Data/Observed/senorge_temp.csv  #> ...and generating for the experiments hist, rcp45, rcp85  #> ...with an x axis range from 4.5 to 8.5 labelled: Mean Annual Temperature (°C)  #> ...with a y axis range from  800 to 1100 and plotting only the leftmost label? TRUE  #> ...using a font size of  7  #> ...with a fixed axis? TRUE  #> ...highlighting models: CNRM-CCLM, CNRM-RCA, ECEARTH-RCA, IPSL-RCA  #> ...and generating files here ../man/figures #> miljo🌿tools thermopluviogram >> importing data...  #> miljo🌿tools thermopluviogram >> loading modelled data from  Climate_Data/Modelled/ #> miljo🌿tools thermopluviogram >> generating property matrix...  #> miljo🌿tools thermopluviogram >> post-processing modelled climate  #> miljo🌿tools thermopluviogram >> loading observed precipitation data from  Climate_Data/Observed/senorge_pr.csv #> miljo🌿tools thermopluviogram >> loading observed temperature data from  Climate_Data/Observed/senorge_temp.csv #> miljo🌿tools thermopluviogram >> post-processing observed data  #> miljo🌿tools thermopluviogram >> merging observed and modelled data  #> miljo🌿tools thermopluviogram >> calculating statisics...  #> miljo🌿tools thermopluviogram >> generating plots...  #> miljo🌿tools thermopluviogram >> generating thermopluviogram for experiment historical #> miljo🌿tools thermopluviogram >> saving thermopluviogram  tpg_Aas_hist_71-05_41-70.png #> 0.50s elapsed for 493720 iterations, 14 overlaps. Consider increasing 'max.time'. #> miljo🌿tools thermopluviogram >> generating exetreme rain plot for experiment  hist #> miljo🌿tools thermopluviogram >> saving extreme rain plot xtreme_rain_Aas_hist_71-05_41-70.png #> miljo🌿tools thermopluviogram >> generating thermopluviogram for experiment RCP 4.5 #> miljo🌿tools thermopluviogram >> saving thermopluviogram  tpg_Aas_rcp45_71-05_41-70.png #> 0.50s elapsed for 720100 iterations, 3 overlaps. Consider increasing 'max.time'. #> miljo🌿tools thermopluviogram >> generating exetreme rain plot for experiment  rcp45 #> miljo🌿tools thermopluviogram >> saving extreme rain plot xtreme_rain_Aas_rcp45_71-05_41-70.png #> miljo🌿tools thermopluviogram >> generating thermopluviogram for experiment RCP 8.5 #> miljo🌿tools thermopluviogram >> saving thermopluviogram  tpg_Aas_rcp85_71-05_41-70.png #> 0.50s elapsed for 659820 iterations, 9 overlaps. Consider increasing 'max.time'. #> miljo🌿tools thermopluviogram >> generating exetreme rain plot for experiment  rcp85 #> miljo🌿tools thermopluviogram >> saving extreme rain plot xtreme_rain_Aas_rcp85_71-05_41-70.png #> miljo🌿tools thermopluviogram >> plots have been saved to ../man/figures #> [1] \"../man/figures\""},{"path":"https://moritzshore.github.io/miljotools/articles/thermopluviograms.html","id":"plots","dir":"Articles","previous_headings":"Workflow","what":"Plots","title":"Thermopluviograms","text":"","code":"knitr::include_graphics(\"../man/figures/tpg_Aas_hist_71-05_41-70.png\") knitr::include_graphics(\"../man/figures/tpg_Aas_rcp45_71-05_41-70.png\") knitr::include_graphics(\"../man/figures/tpg_Aas_rcp85_71-05_41-70.png\") knitr::include_graphics(\"../man/figures/xtreme_rain_Aas_hist_71-05_41-70.png\") knitr::include_graphics(\"../man/figures/xtreme_rain_Aas_rcp45_71-05_41-70.png\") knitr::include_graphics(\"../man/figures/xtreme_rain_Aas_rcp85_71-05_41-70.png\")"},{"path":"https://moritzshore.github.io/miljotools/articles/thermopluviograms.html","id":"cleanup","dir":"Articles","previous_headings":"Workflow","what":"Cleanup","title":"Thermopluviograms","text":"","code":"file.remove(\"Climate_Data.zip\") #> [1] TRUE unlink(\"Climate_Data/\", recursive = T)"},{"path":"https://moritzshore.github.io/miljotools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Moritz Shore. Maintainer.","code":""},{"path":"https://moritzshore.github.io/miljotools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shore M (2025). miljotools: Download MET Nordic data / Soil Texture Classification / Thermopluviograms. R package version 0.7.0, https://moritzshore.github.io/miljotools/.","code":"@Manual{,   title = {miljotools: Download MET Nordic data / Soil Texture Classification / Thermopluviograms},   author = {Moritz Shore},   year = {2025},   note = {R package version 0.7.0},   url = {https://moritzshore.github.io/miljotools/}, }"},{"path":"https://moritzshore.github.io/miljotools/index.html","id":"miljotools-","dir":"","previous_headings":"","what":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","title":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","text":"R package aims host variety functions useful data collection, processing, analysis environmental modelling context NIBIO’s “Environmental Modelling Measures” group. information, please see “Support Tools” page. bugs problems encountered, please open new issue attempt resolve .  Table contents Introduction Installing miljotools Tools Acknowledgements","code":""},{"path":"https://moritzshore.github.io/miljotools/index.html","id":"introduction-","dir":"","previous_headings":"","what":"Introduction","title":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","text":"large fraction workload “modeler” environmental sciences consists “workflows”. workflows typically revolve around getting data, converting data, processing data actually using data model. Even used, data needs post-processed can bring meaningful insight. , coding, scripting, automation “tools” used many people. However, use tools often restricted either author, small network close colleagues, even useful wide variety researchers. Miljotools aims partially remedy fragmentation useful “tools” providing repository generalized documented functions, workflows, scripts, etc. provided open-source R package “miljotools” Note: unofficial side project still infancy, currently encompass much functionality. like contribute, please reach maintainer developer access.","code":""},{"path":"https://moritzshore.github.io/miljotools/index.html","id":"installing-miljotools-","dir":"","previous_headings":"","what":"Installing miljotools","title":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","text":"can install use miljotools R, downloaded GitHub repository using following command:","code":"# install remotes, if not already present install.packages(\"remotes\")  remotes::install_github(repo = \"moritzshore/miljotools\", ref = remotes::github_release())  library(miljotools)"},{"path":"https://moritzshore.github.io/miljotools/index.html","id":"tools-","dir":"","previous_headings":"","what":"Tools","title":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","text":"View “Articles” get started MET Nordic Reanalysis Dataset Soil Classification Thermopluviograms come…","code":""},{"path":"https://moritzshore.github.io/miljotools/index.html","id":"add-your-own-","dir":"","previous_headings":"","what":"Add your own","title":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","text":"function / code / workflow / script / etc. like add package, please contact maintainer developer access.","code":""},{"path":"https://moritzshore.github.io/miljotools/index.html","id":"acknowledgements-","dir":"","previous_headings":"","what":"Acknowledgements","title":"Download MET Nordic data / Soil Texture Classification / Thermopluviograms","text":"development package supported NIBIO Environmental Modelling Measures group, Support Tools designation. Additionally, package part developed  OPTAIN project received funding European Union’s Horizon 2020 research innovation program grant agreement . 862756. Finally, logo heavily inspired (celebrating) old  logo","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://moritzshore.github.io/miljotools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Texture ClassifieR — classify_soil","title":"Soil Texture ClassifieR — classify_soil","text":"Reads soil clay, silt, sand fractions returns soil classification based USDA Norwegian definitions.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Texture ClassifieR — classify_soil","text":"","code":"classify_soil(   input,   output,   wd = NULL,   version = \"NOR\",   plot_result = TRUE,   interactive = TRUE,   sheet = 1,   decimal = \",\",   append = TRUE,   new_sums = FALSE,   write = FALSE )"},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Texture ClassifieR — classify_soil","text":"input path input file (supported: .xlsx/.csv) output file name output (select csv excel) (ie: .xlsx/.csv) wd path desired working directory. Default current. version \"\" Norwegian, \"USDA\" USDA. plot_result TRUE/FALSE display diagnostic plot? interactive plot true, want interactive static plot? sheet using excel, specify sheet data . 1 default decimal Specify decimal separator (\",\" \".\"). default \",\" append append results existing dataframe? (TRUE) return single column (FALSE). default TRUE. new_sums append new \"rounded sums\" input dataframe? Default FALSE write optional flag stop function writing files. Default FALSE","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Texture ClassifieR — classify_soil","text":"Returns path written file","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Texture ClassifieR — classify_soil","text":"Automatically Compatible csv xlsx. Tries automatically guess format data, acts accordingly. Automatically rounds total fraction 100%, differences 1%. Exports classification based user settings Creates interactive diagnostic plot, well saving one output directory. Note: script automatically try identify columns contain clay, silt, sand fractions also try identify format . work, might get incorrect flawed results, make sure READ CONSOLE prints , make sure correct things. script read file automatically, following format recommended: Clay column: \"clay\" percent format (%), decimal = \".\" Silt column: \"silt\" percent format (%), decimal = \".\" Sand column: \"sand\" percent format (%), decimal = \".\"","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Texture ClassifieR — classify_soil","text":"Moritz Shore, Nov.2 2022","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/classify_soil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Texture ClassifieR — classify_soil","text":"","code":"# for demonstration purposes, use path of package  # currently broken due to dependency issue (ggtern) if(FALSE){   example_file_path <- system.file(package = \"miljotools\", \"/extdata/soil_classify/example.csv\")  classify_soil(   input = example_file_path,   output = \"output_file.csv\",   version = \"NOR\",   plot_result = TRUE,   interactive = FALSE,   decimal = \".\",   write = FALSE # FALSE just for demonstration )  }"},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"function converts projected MET Nordic file (metnordic_reproject()) compatible CWatm. function mainly just changes dimension names easting northing x y swapes variable order crap load boiler plate ... well.. ncdf4.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"","code":"cwatm_convert_nc(infile, outfile)"},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"infile String: path projected MET Nordic .nc file created metnordic_reproject() outfile String: path file name desired output file","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"Path outfile","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"Code largely adapted handy guide: (link) Pat Bartlein, bartlein@uoregon.edu","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/cwatm_convert_nc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert MET Nordic Files to CWatM Meteo Input — cwatm_convert_nc","text":"","code":"#TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert hourly MET Nordic files to daily — metnordic_aggregate","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"function takes 24 hourly files day variable converts daily format. choice four different aggregation methods: min, max, mean, sum.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"","code":"metnordic_aggregate(   directory,   variable,   method,   day,   outpath,   overwrite = TRUE,   verbose = TRUE )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"directory String: Path source files (downloaded metnordic_download() metnordic_download_daterange()) variable String: MET Nordic variable aggregate (ie. \"precipitation_amount\", (see )) method String: method aggregation (\"mean\", \"min\", \"max\", \"sum\") day String: day convert (\"YYYYMMDD\" format, ie. \"20150901\") outpath String: path directory created files overwrite Logical: overwrite existing file? verbose Logical: plot map?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"String: path written file","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"function designed take input metnordic_download() provides input metnordic_merge() Code largely adapted handy guide: (link) Pat Bartlein, bartlein@uoregon.edu","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert hourly MET Nordic files to daily — metnordic_aggregate","text":"","code":"# TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate_daterange.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate a date range — metnordic_aggregate_daterange","title":"Aggregate a date range — metnordic_aggregate_daterange","text":"wrapper function metnordic_aggregate() aggregates files start end date (parallel). must supply variable type method aggregation (eg. mean). function designed take input metnordic_download_daterange() provides input metnordic_merge_daily()","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate_daterange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate a date range — metnordic_aggregate_daterange","text":"","code":"metnordic_aggregate_daterange(   directory,   variable,   method,   start,   end,   outpath,   overwrite = TRUE,   n_cores = NULL,   verbose = TRUE )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate_daterange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate a date range — metnordic_aggregate_daterange","text":"directory String: Path source files (downloaded metnordic_download() metnordic_download_daterange()) variable String: MET Nordic variable aggregate (eg. \"precipitation_amount\", (see )) method String: method aggregation (\"mean\", \"min\", \"max\", \"sum\") start String: start date range aggregate (eg. \"2015-01-01\") end String: end date range aggregate (eg. \"2015-12-31\") outpath String: path directory created files overwrite Logical: overwrite existing files? (optional, default TRUE) n_cores Numeric: max number cores perform operation . (optional) verbose Logical: print console? (optional)","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate_daterange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate a date range — metnordic_aggregate_daterange","text":"Returns named list file paths aggregated file. FALSE indicates file failed aggregated, likely due 24hrs (24 individual files) aggregated .","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_aggregate_daterange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate a date range — metnordic_aggregate_daterange","text":"Currently supported following types aggregation: \"mean\" \"min\" \"max\" \"sum\". Operations performed paralell multiple cores. can control number cores used num_cores parameters.","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_buildquery.html","id":null,"dir":"Reference","previous_headings":"","what":"Build MET Nordic Download Query — metnordic_buildquery","title":"Build MET Nordic Download Query — metnordic_buildquery","text":"function builds URL queries downloading MET Nordic data OPENDAP protocol. requirements function work bounding coordinates divined function metnordic_coordwindow(), variables interest, starting ending dates desired grid resolution. results function can downloaded passed metnordic_download().","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_buildquery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build MET Nordic Download Query — metnordic_buildquery","text":"","code":"metnordic_buildquery(   bounding_coords,   mn_variables,   fromdate,   todate,   grid_resolution = 1,   dataset = \"reanalysis\",   verbose = FALSE )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_buildquery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build MET Nordic Download Query — metnordic_buildquery","text":"bounding_coords passed metnordic_coordwindow() mn_variables MET Nordic variables (see documentation) fromdate ie. \"2019-01-01 00:00:00\" todate ie. \"2020-12-31 23:00:00\" grid_resolution integer, ie. 3 3x3 km grid. dataset either 'reanalysis' re-run archive, 'operational' operational archive, 'continuous' source , depending time range. verbose print console?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_buildquery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build MET Nordic Download Query — metnordic_buildquery","text":"character vector OPENDAP URLs download.","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_buildquery.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build MET Nordic Download Query — metnordic_buildquery","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_buildquery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build MET Nordic Download Query — metnordic_buildquery","text":"","code":"# TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_coordwindow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","title":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","text":"function retrieves coordinate window shapefile downloading MET Nordic files. window can passed metnordic_buildquery() parse OPENDAP urls download.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_coordwindow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","text":"","code":"metnordic_coordwindow(area_path, area_buffer = 0, verbose = FALSE)"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_coordwindow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","text":"area_path String: path shapefile region / point (must point polygon geometry!) area_buffer Integer: buffer m place around shapefile / point verbose Logical: plot coordinate window?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_coordwindow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","text":"returns list min max x y cells downloading.","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_coordwindow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_coordwindow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a MET Nordic Coordinate Window — metnordic_coordwindow","text":"","code":"# TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a MET Nordic Data URL — metnordic_download","title":"Download a MET Nordic Data URL — metnordic_download","text":"Downloads MET Nordic re-analysis data using OPENDAP url. function ideally takes input metnordic_buildquery() provides input metnordic_aggregate(). issues downloads, make sure check https://status.met./ server (THREDDS) status.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a MET Nordic Data URL — metnordic_download","text":"","code":"metnordic_download(url, outdir, vars, overwrite = FALSE, verbose = TRUE)"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a MET Nordic Data URL — metnordic_download","text":"url String: OPENDAP url downloaded (`metnordic_buildquery()). outdir String: Location .nc file written. vars Vector: MET Nordic Variables extract. See: MET Nordic variables overwrite Logical: Overwrite files already exist? verbose Logical: Print preview?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a MET Nordic Data URL — metnordic_download","text":"String: file paths generated files","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download a MET Nordic Data URL — metnordic_download","text":"Code largely adapted handy guide: (link) Pat Bartlein, bartlein@uoregon.edu","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download a MET Nordic Data URL — metnordic_download","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a MET Nordic Data URL — metnordic_download","text":"","code":"#TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download_daterange.html","id":null,"dir":"Reference","previous_headings":"","what":"Download MET Nordic files — metnordic_download_daterange","title":"Download MET Nordic files — metnordic_download_daterange","text":"Downloads list provided queries MET thredds server using OPENDAP protocol. queries passed metnordic_buildqueries(). Folder download, variables download also need provided! files already present folder re-downloaded. means download fails whatever network reason, can just restart function pick left . issues downloads, make sure check https://status.met./ server (THREDDS) status.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download_daterange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download MET Nordic files — metnordic_download_daterange","text":"","code":"metnordic_download_daterange(queries, directory, mn_variables, verbose = FALSE)"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download_daterange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download MET Nordic files — metnordic_download_daterange","text":"queries list passed metnordic_buildqueries() directory folder download mn_variables MET Nordic variables download. verbose print status?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_download_daterange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download MET Nordic files — metnordic_download_daterange","text":"path download directory","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"MET Nordic Extract - Point Timeseries regional downloads — metnordic_extract","title":"MET Nordic Extract - Point Timeseries regional downloads — metnordic_extract","text":"function extracts timeseries (hourly) files chain metnordic_coordwindow() –>  metnordic_buildquery() –> metnordic_download_daterange() –> metnordic_merge_hourly() –> metnordic_extract(). function extracts nearest grid cell, like bi-linear interpolation nearest 4 cells, please try metnordic_extract_grid()","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MET Nordic Extract - Point Timeseries regional downloads — metnordic_extract","text":"","code":"metnordic_extract(   directory,   mn_variables,   point,   outdir,   name,   verbose = FALSE )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MET Nordic Extract - Point Timeseries regional downloads — metnordic_extract","text":"directory (String) directory containing merged files created metnordic_merge_hourly() mn_variables (vector, strings) variables extract point object class \"sf\" point geometry. outdir (string) directory write file (.csv) name (string) name file (added filename) verbose (boolean) print?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MET Nordic Extract - Point Timeseries regional downloads — metnordic_extract","text":"path written file","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data on a (ir)regular grid basis — metnordic_extract_grid","title":"Extract data on a (ir)regular grid basis — metnordic_extract_grid","text":"function takes files metnordic_merge_hourly() extracts timeseries desired locations. polygon shapefile passed function, data extracted grid cells within (buffered) area. point geometry supplied, data extracted point. file written disk .csv file grid cell metadata file grid cell.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data on a (ir)regular grid basis — metnordic_extract_grid","text":"","code":"metnordic_extract_grid(   merged_path,   area,   buffer = 0,   mn_variables,   outdir,   verbose )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data on a (ir)regular grid basis — metnordic_extract_grid","text":"merged_path String, Path merged ncdf files metnordic_merge_hourly() area Geo-referenced shapefile either polygon point geometry. Passing polygon geometry lead regular grid extracted overlaying points. buffer Numeric, buffer meters. Useful getting grid cells just outside catchment. used point geometry passed. mn_variables Character Vector, Met Nordic variables extract outdir String, Folder data written verbose Boolean, print status","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data on a (ir)regular grid basis — metnordic_extract_grid","text":"path written files","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_extract_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract data on a (ir)regular grid basis — metnordic_extract_grid","text":"TODO: add resolution polygon grid..","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge MET Nordic Files (daily) — metnordic_merge_daily","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"function merges daily MET Nordic files single .nc file single variable. input data output data metnordic_aggregate(). function provides input metnordic_reproject(). hourly merging, please use metnordic_merge_hourly()","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"","code":"metnordic_merge_daily(folderpath, variable, outpath, overwrite = FALSE)"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"folderpath String: Outpath files metnordic_aggregate(). variable String: MET Nordic variable used (NOTE: forget suffix 'mean', 'sum', 'min', 'max'). outpath String: Folder path write files. overwrite Logical: Overwrite existing file?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"file path generated files","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"Code largely adapted handy guide: (link) Pat Bartlein, bartlein@uoregon.edu","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_daily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge MET Nordic Files (daily) — metnordic_merge_daily","text":"","code":"# TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_hourly.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge MET Nordic files (hourly) — metnordic_merge_hourly","title":"Merge MET Nordic files (hourly) — metnordic_merge_hourly","text":"function lets combine hourly files downloaded download_metnordic() single files. Note, files separate per variable!","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_hourly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge MET Nordic files (hourly) — metnordic_merge_hourly","text":"","code":"metnordic_merge_hourly(   folderpath,   variable,   outpath,   n_cores = NULL,   overwrite = FALSE,   verify = FALSE,   verbose = FALSE )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_hourly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge MET Nordic files (hourly) — metnordic_merge_hourly","text":"folderpath (String) folder individual files located variable (String) MET Nordic variable combine outpath (String) folder write file n_cores (Integer) Number cores use parallel processing (Defaults max - 2) overwrite (Boolean) overwrite existing file? verify (Boolean) optional check see files merged incremental (Recommended!) verbose (Boolean) print status?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_merge_hourly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge MET Nordic files (hourly) — metnordic_merge_hourly","text":"path written file","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Download MET Nordic data for one point — metnordic_point","title":"Download MET Nordic data for one point — metnordic_point","text":"note: function works point geometry csv format.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download MET Nordic data for one point — metnordic_point","text":"","code":"metnordic_point(   area,   path = NULL,   fromdate = \"2012-09-01 10:00:00\",   todate = \"2012-09-01 20:00:00\",   mn_variables = NULL,   dataset = \"continuous\",   verbose = TRUE )"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download MET Nordic data for one point — metnordic_point","text":"area (string) path geo-referenced shapefile (point) desired area. (optionally, can pass sf object directly.) path (string) path download directory fromdate (string) date time start time series (ie. \"2012-09-01 10:00:00\") todate (string) date time end time series (ie. \"2013-09-01 10:00:00\") mn_variables (vector) Leave blank default variables dataset (string) dataset source files ? (\"reanalysis\", \"operational\", \"continuous\" ). verbose (boolean) generate graphs showing previews data download?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download MET Nordic data for one point — metnordic_point","text":"Function returns path .csv files download written. One .csv file grid point within (buffered) shape file area. Additionally one metadata file (.csv) written ","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download MET Nordic data for one point — metnordic_point","text":"modified version legacy get_metno_reanalysis3 designed specifically downloading single points csv format.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download MET Nordic data for one point — metnordic_point","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download MET Nordic data for one point — metnordic_point","text":"","code":"if(FALSE){  metnordic_csv(  area = example_file_path,  fromdate = \"2015-01-01\",  todate = \"2015-01-02\",  verbose = TRUE  )  }"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-project MET Nordic Data — metnordic_reproject","title":"Re-project MET Nordic Data — metnordic_reproject","text":"Takes MET Nordic .nc files created metnordic_merge() re-projects desired projection.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-project MET Nordic Data — metnordic_reproject","text":"","code":"metnordic_reproject(filepath, outfile, projstring = NULL)"},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-project MET Nordic Data — metnordic_reproject","text":"filepath path .nc file reprojected outfile filepath .nc file created. (file path used, .nc file overwritten) projstring desired projection proj4 format. default, UTM33N used.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-project MET Nordic Data — metnordic_reproject","text":"Filepath re-projected file","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Re-project MET Nordic Data — metnordic_reproject","text":"NOTE: currently following projstring tested: projstring <- \"+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs +type=crs\"","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Re-project MET Nordic Data — metnordic_reproject","text":"Moritz Shore","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/metnordic_reproject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-project MET Nordic Data — metnordic_reproject","text":"","code":"# TODO"},{"path":"https://moritzshore.github.io/miljotools/reference/mt_print.html","id":null,"dir":"Reference","previous_headings":"","what":"custom print function for miljotools — mt_print","title":"custom print function for miljotools — mt_print","text":"custom print function miljotools","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/mt_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"custom print function for miljotools — mt_print","text":"","code":"mt_print(verbose, function_name, text, text2 = NULL, rflag = FALSE)"},{"path":"https://moritzshore.github.io/miljotools/reference/mt_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"custom print function for miljotools — mt_print","text":"verbose print function_name function name string text string 1 text2 string 2 rflag place replacement flag","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/mt_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"custom print function for miljotools — mt_print","text":"nothing","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/reanalysis3_swatinput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SWAT+ meteo input from MetNo Reanalysis3 data (SUPERSEDED) — reanalysis3_swatinput","title":"Create SWAT+ meteo input from MetNo Reanalysis3 data (SUPERSEDED) — reanalysis3_swatinput","text":"SUPERSEDED. Note: intended use function within swatplus_metnordic() now internal function.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/reanalysis3_swatinput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SWAT+ meteo input from MetNo Reanalysis3 data (SUPERSEDED) — reanalysis3_swatinput","text":"","code":"reanalysis3_swatinput(   path,   swat_setup,   write_wgn = TRUE,   start = NA,   end = NA,   sqlite_path = NULL,   verbose = FALSE,   backup = TRUE )"},{"path":"https://moritzshore.github.io/miljotools/reference/reanalysis3_swatinput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SWAT+ meteo input from MetNo Reanalysis3 data (SUPERSEDED) — reanalysis3_swatinput","text":"path path daily data provided reanalysis3_daily() swat_setup path SWAT+ setup. (Required!) write_wgn calculate write weather generator? defaults true. (now just based station #1 (bottom left)) start optional parameter define start date time series end optional parameter define end date time series sqlite_path path SWAT+ sqlite file (needed wish update database). Warning: start end parameters ignored case (SWATprepR limitation) verbose print status? backup (logical, defaults true) creates backup swat folder modification","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/reanalysis3_swatinput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SWAT+ meteo input from MetNo Reanalysis3 data (SUPERSEDED) — reanalysis3_swatinput","text":"Files generated provided paths","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/reanalysis3_swatinput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create SWAT+ meteo input from MetNo Reanalysis3 data (SUPERSEDED) — reanalysis3_swatinput","text":"Moritz Shore, Svajunas Plunge","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/swap_metnordic.html","id":null,"dir":"Reference","previous_headings":"","what":"METNordic input for SWAP — swap_metnordic","title":"METNordic input for SWAP — swap_metnordic","text":"function converts Meteo data MET Nordic SWAP-compatible format. Note: need use metnordic_csv() create proper input function.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/swap_metnordic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"METNordic input for SWAP — swap_metnordic","text":"","code":"swap_metnordic(dldir, name, outpath, timescale = \"daily\", verbose = FALSE)"},{"path":"https://moritzshore.github.io/miljotools/reference/swap_metnordic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"METNordic input for SWAP — swap_metnordic","text":"dldir download directory containing data metadata, generated metnordic_extract() name name extracted point, defined metnordic_extract() outpath desired location swap .met file written timescale \"daily\" \"hourly\". (hourly supported yet) verbose logical, print stuff console","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/swap_metnordic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"METNordic input for SWAP — swap_metnordic","text":"path written .met file","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/swatplus_metnordic.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply MetNordic meteo data to a SWAT+ setup — swatplus_metnordic","title":"Apply MetNordic meteo data to a SWAT+ setup — swatplus_metnordic","text":"function takes output metnordic_extract_grid() applies SWAT+ setup, help SWATprepR.","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/swatplus_metnordic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply MetNordic meteo data to a SWAT+ setup — swatplus_metnordic","text":"","code":"swatplus_metnordic(   directory,   swat_setup,   write_wgn = TRUE,   start = NA,   end = NA,   sqlite_path = NULL,   verbose )"},{"path":"https://moritzshore.github.io/miljotools/reference/swatplus_metnordic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply MetNordic meteo data to a SWAT+ setup — swatplus_metnordic","text":"directory path weather data created metnordic_extract_grid() swat_setup path SWAT+ setup write_wgn weather generator written? start optional parameter define start date time series end optional parameter define end date time series4 sqlite_path path SWAT+ sqlite file (needed wish update database). Warning: start end parameters ignored case (SWATprepR limitation) verbose print console?","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/swatplus_metnordic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply MetNordic meteo data to a SWAT+ setup — swatplus_metnordic","text":"path SWAT+ setup","code":""},{"path":[]},{"path":"https://moritzshore.github.io/miljotools/reference/thermopluviogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Thermopluviogram — thermopluviogram","title":"Thermopluviogram — thermopluviogram","text":"Combines climate data Norsk Klima Service Center observed data produce \"Thermopluviograms\".","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/thermopluviogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thermopluviogram — thermopluviogram","text":"","code":"thermopluviogram(   modelled_climate,   observed_pr,   observed_tm,   outpath,   location,   ref_startdate,   ref_enddate,   obs_startdate,   obs_enddate,   verbose = TRUE,   chosen_model_runs = NULL,   experiments = c(\"hist\", \"rcp45\", \"rcp85\"),   left_yaxis_only = FALSE,   fixed_axis = TRUE,   axis_font_size = 7,   yaxisrange = c(800, 1100),   xaxisrange = c(4.5, 8.5),   xlab = \"Mean Annual Temperature (°C)\" )"},{"path":"https://moritzshore.github.io/miljotools/reference/thermopluviogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thermopluviogram — thermopluviogram","text":"modelled_climate filepath climate files (.e. \"Climate_Data/Modelled/\") observed_pr filepath observed precipitation data (.csv) observed_tm filepath observed mean temperature data (.csv) outpath outpath plotting location location plot (used file naming) (string) ref_startdate reference period start (ie.\"1971-01-01\") ref_enddate reference period d end (ie. \"2005-12-31\") obs_startdate observation period start (ie. \"2041-01-01\") obs_enddate observation period end (ie. \"2070-12-31\") verbose print progress? chosen_model_runs Names models color blue experiments Experiments generate (ie. c(\"hist\", \"rcp45\",\"rcp85\")) left_yaxis_only set true, historical plot axis labeled (three plots can placed next figure) fixed_axis use fixed axis range plotting? (boolean) axis_font_size Font size (Integer) yaxisrange y axis range (ie. c(800,1100), mm) xaxisrange x axis range (ie.  c(4.5, 8.5), Celsius) xlab x axis label. (ie. \"Mean Annual Temperature)\", u00B0 degree symbol)","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/thermopluviogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thermopluviogram — thermopluviogram","text":"path generated files","code":""},{"path":"https://moritzshore.github.io/miljotools/reference/thermopluviogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thermopluviogram — thermopluviogram","text":"https://www.senorge./PrecTempMap todo: describe file struture Generates thermopluviograms extreme rain index plots NVE flexible. works current source data structure. Date:  01.06.2022 Author:  Moritz Shore","code":""}]
